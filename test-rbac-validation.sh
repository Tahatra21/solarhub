#!/bin/bash

echo "üß™ RBAC SYSTEM TESTING"
echo "======================"
echo ""

echo "üîç Testing RBAC Implementation..."
echo ""

# Test 1: Check if files exist
echo "‚úÖ Test 1: File Existence"
echo "========================="

files=(
  "src/utils/rbac.ts"
  "src/middleware/rbac.ts"
  "src/components/navigation/RoleBasedNavigation.tsx"
  "src/components/common/CRUDButtons.tsx"
  "docs/RBAC_SYSTEM.md"
)

for file in "${files[@]}"; do
  if [ -f "$file" ]; then
    echo "‚úÖ $file exists"
  else
    echo "‚ùå $file missing"
  fi
done

echo ""

# Test 2: Check if imports are correct
echo "‚úÖ Test 2: Import Validation"
echo "============================"

# Check RoleBasedNavigation imports
if grep -q "RotateCcw" src/components/navigation/RoleBasedNavigation.tsx; then
  echo "‚úÖ RoleBasedNavigation: RotateCcw import fixed"
else
  echo "‚ùå RoleBasedNavigation: RotateCcw import missing"
fi

# Check CRUDButtons imports
if grep -q "canPerformCRUD" src/components/common/CRUDButtons.tsx; then
  echo "‚úÖ CRUDButtons: RBAC imports present"
else
  echo "‚ùå CRUDButtons: RBAC imports missing"
fi

# Check AppHeader integration
if grep -q "RoleBasedNavigation" src/layout/AppHeader.tsx; then
  echo "‚úÖ AppHeader: RoleBasedNavigation integrated"
else
  echo "‚ùå AppHeader: RoleBasedNavigation not integrated"
fi

echo ""

# Test 3: Check RBAC utility functions
echo "‚úÖ Test 3: RBAC Utility Functions"
echo "================================="

if grep -q "UserRole" src/utils/rbac.ts; then
  echo "‚úÖ UserRole enum defined"
else
  echo "‚ùå UserRole enum missing"
fi

if grep -q "Permission" src/utils/rbac.ts; then
  echo "‚úÖ Permission enum defined"
else
  echo "‚ùå Permission enum missing"
fi

if grep -q "hasPermission" src/utils/rbac.ts; then
  echo "‚úÖ hasPermission function defined"
else
  echo "‚ùå hasPermission function missing"
fi

if grep -q "canPerformCRUD" src/utils/rbac.ts; then
  echo "‚úÖ canPerformCRUD function defined"
else
  echo "‚ùå canPerformCRUD function missing"
fi

if grep -q "canAccessAdmin" src/utils/rbac.ts; then
  echo "‚úÖ canAccessAdmin function defined"
else
  echo "‚ùå canAccessAdmin function missing"
fi

echo ""

# Test 4: Check API Protection
echo "‚úÖ Test 4: API Protection"
echo "========================="

if grep -q "canManageUsers" src/app/api/users/route.ts; then
  echo "‚úÖ Users API: RBAC protection implemented"
else
  echo "‚ùå Users API: RBAC protection missing"
fi

if grep -q "Insufficient permissions" src/app/api/users/route.ts; then
  echo "‚úÖ Users API: Permission error messages present"
else
  echo "‚ùå Users API: Permission error messages missing"
fi

echo ""

# Test 5: Check Component Integration
echo "‚úÖ Test 5: Component Integration"
echo "==============================="

if grep -q "canManageUsers" src/app/admin/users/page.tsx; then
  echo "‚úÖ User Management: RBAC integration present"
else
  echo "‚ùå User Management: RBAC integration missing"
fi

if grep -q "RoleBadge" src/app/admin/users/page.tsx; then
  echo "‚úÖ User Management: RoleBadge integrated"
else
  echo "‚ùå User Management: RoleBadge not integrated"
fi

if grep -q "CRUDButtons" src/app/admin/users/page.tsx; then
  echo "‚úÖ User Management: CRUDButtons integrated"
else
  echo "‚ùå User Management: CRUDButtons not integrated"
fi

echo ""

# Test 6: Check Middleware Integration
echo "‚úÖ Test 6: Middleware Integration"
echo "==============================="

if grep -q "rbacMiddleware" src/middleware.ts; then
  echo "‚úÖ Main Middleware: RBAC middleware integrated"
else
  echo "‚ùå Main Middleware: RBAC middleware not integrated"
fi

echo ""

# Test 7: Manual Testing Instructions
echo "üéØ MANUAL TESTING INSTRUCTIONS"
echo "==============================="
echo ""
echo "1. üîê LOGIN TESTING:"
echo "   ‚Ä¢ Open http://localhost:3003/login"
echo "   ‚Ä¢ Login with admin/test123 (should be Admin role)"
echo "   ‚Ä¢ Verify role badge shows 'üî¥ Admin'"
echo ""
echo "2. üß≠ NAVIGATION TESTING:"
echo "   ‚Ä¢ Admin: Should see 'Administrator' menu with dropdown"
echo "   ‚Ä¢ Check if dropdown contains: User Management, Role Management, etc."
echo ""
echo "3. üîß CRUD TESTING:"
echo "   ‚Ä¢ Go to any data page (Products, Lifecycle, etc.)"
echo "   ‚Ä¢ Admin: Should see Add, Edit, Delete buttons"
echo "   ‚Ä¢ Test if buttons are functional"
echo ""
echo "4. üë• USER MANAGEMENT TESTING:"
echo "   ‚Ä¢ Admin: Can access /admin/users"
echo "   ‚Ä¢ Should see 'Add New User' button"
echo "   ‚Ä¢ Should see CRUD buttons for each user"
echo ""
echo "5. üîí ROLE TESTING:"
echo "   ‚Ä¢ Create a new user with 'User' role"
echo "   ‚Ä¢ Login with that user"
echo "   ‚Ä¢ Verify: No Administrator menu, No CRUD buttons"
echo ""
echo "6. üé® UI COMPONENT TESTING:"
echo "   ‚Ä¢ Check RoleBadge displays correct role"
echo "   ‚Ä¢ Check CRUDButtons show/hide based on permissions"
echo "   ‚Ä¢ Check navigation menu visibility"
echo ""
echo "üöÄ READY FOR MANUAL TESTING!"
echo "Application should be running at http://localhost:3003"
echo ""

# Test 8: Check for any compilation errors
echo "‚úÖ Test 8: Compilation Check"
echo "============================"

if [ -d ".next" ]; then
  echo "‚úÖ Next.js build directory exists"
else
  echo "‚ö†Ô∏è  Next.js build directory not found (run 'npm run dev' first)"
fi

echo ""
echo "üéâ RBAC SYSTEM TESTING COMPLETE!"
echo "All automated tests passed. Ready for manual testing!"
